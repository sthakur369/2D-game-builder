{
  "asset_prompts": {
    "characters": {
      "goku_ssj_spritesheet": "Full body sprite sheet for a powerful anime warrior character, resembling Dragon Ball Z Goku, with spiky golden hair (Super Saiyan), orange gi, in multiple poses: idle, running, jumping, punching, kicking, energy blast charging, energy blast firing, special move (Kamehameha), hurt, defeated. All poses are dynamic action poses. Side view or 3/4 view. Each individual frame is 512x512 pixels. Transparent background. High quality 2D art, cel-shaded, vibrant colors, anime style, action, battle-ready.",
      "vegeta_spritesheet": "Full body sprite sheet for a proud anime warrior character, resembling Dragon Ball Z Vegeta, with spiky black hair, blue battle suit, in multiple poses: idle, running, jumping, punching, kicking, energy blast charging, energy blast firing, special move (Final Flash), hurt, defeated. All poses are dynamic action poses. Side view or 3/4 view. Each individual frame is 512x512 pixels. Transparent background. High quality 2D art, cel-shaded, vibrant colors, anime style, action, battle-ready."
    },
    "backgrounds": {
      "battle_arena_wasteland": "Wide angle view of a dynamic 2D fighting game background. A destroyed rocky wasteland with floating debris in the orange sky, reminiscent of a Dragon Ball Z battle arena. Distant jagged mountains, deep cracks in the ground, and glowing energy particles subtly floating in the air. Intense, bright daytime lighting with dynamic shadows from destruction. High quality anime art style, cel-shaded, highly detailed, vibrant, epic scale. Resolution 1920x1080 pixels."
    },
    "effects": {
      "kamehameha_fx": "Energy beam particle effect sprite sheet. A powerful blue and white Kamehameha-style blast, starting from a concentrated sphere, expanding into a wide beam, and dissipating. Dynamic, explosive, highly visible. Transparent background. Anime style, vibrant, high energy. Individual frames are 512x256 pixels.",
      "spirit_bomb_fx": "Large energy sphere special attack effect sprite sheet. A massive blue and white Spirit Bomb-style sphere, accumulating energy, intensely glowing with visible energy currents, and exploding on impact. Dynamic, glowing. Transparent background. Anime style, vibrant, high energy. Individual frames are 512x512 pixels.",
      "galick_gun_fx": "Energy beam particle effect sprite sheet. A powerful purple and black Galick Gun-style blast, starting from a concentrated sphere, expanding into a wide beam, and dissipating. Dynamic, explosive, highly visible. Transparent background. Anime style, vibrant, high energy. Individual frames are 512x256 pixels.",
      "final_flash_fx": "Large energy beam special attack effect sprite sheet. A massive golden and yellow Final Flash-style beam, charging intensely, firing with immense power, and expanding across the screen. Dynamic, explosive, screen-filling. Transparent background. Anime style, vibrant, high energy. Individual frames are 1024x512 pixels.",
      "hit_impact_fx": "Explosive impact effect sprite sheet. A flash of white, yellow, and orange energy with sharp, jagged lines and small bursting particles, indicating a powerful punch or kick landing. Transparent background. Individual frames are 256x256 pixels. Anime style, dynamic, impactful, high contrast.",
      "combo_fx": "Small, energetic bursting particle effect. Golden and electric yellow glow with sharp, angular shapes, used for combo counter visual feedback or hit confirmations. Transparent background. Individual frames are 256x256 pixels. Anime style, dynamic."
    }
  },
  "phaser_modules": {
    "loadAssets": "function loadAssets(scene) {\n  console.log(\"\u2705 loadAssets is running\");\n\n  // Load Background\n  scene.load.image('battle_arena_wasteland', 'assets/backgrounds/battle_arena_wasteland.png');\n\n  // Load Characters (assuming 140x218 for game frames from 512x512 source)\n  scene.load.spritesheet('goku_ssj_spritesheet', 'assets/characters/goku_ssj_spritesheet.png', {\n    frameWidth: 140,\n    frameHeight: 218\n  });\n  scene.load.spritesheet('vegeta_spritesheet', 'assets/characters/vegeta_spritesheet.png', {\n    frameWidth: 140,\n    frameHeight: 218\n  });\n\n  // Load UI elements\n  scene.load.image('goku_portrait', 'assets/ui/goku_portrait.png');\n  scene.load.image('vegeta_portrait', 'assets/ui/vegeta_portrait.png');\n  scene.load.image('health_bar_fill', 'assets/ui/health_bar_fill.png');\n  scene.load.image('energy_bar_fill', 'assets/ui/energy_bar_fill.png');\n  scene.load.image('round_counter_bg', 'assets/ui/round_counter_bg.png');\n\n  // Load Effects\n  scene.load.spritesheet('kamehameha_fx', 'assets/effects/kamehameha_fx.png', {\n    frameWidth: 512,\n    frameHeight: 256\n  });\n  scene.load.spritesheet('galick_gun_fx', 'assets/effects/galick_gun_fx.png', {\n    frameWidth: 512,\n    frameHeight: 256\n  });\n  scene.load.spritesheet('spirit_bomb_fx', 'assets/effects/spirit_bomb_fx.png', {\n    frameWidth: 512,\n    frameHeight: 512\n  });\n  scene.load.spritesheet('final_flash_fx', 'assets/effects/final_flash_fx.png', {\n    frameWidth: 1024,\n    frameHeight: 512\n  });\n  scene.load.spritesheet('hit_impact_fx', 'assets/effects/hit_impact_fx.png', {\n    frameWidth: 256,\n    frameHeight: 256\n  });\n\n  // Note: Audio files are not loaded as per strict instruction (unless they exist).\n  // They would typically be loaded here if available.\n}\nwindow.loadAssets = loadAssets;",
    "createAnimations": "function createAnimations(scene) {\n  console.log(\"\u2705 createAnimations is running\");\n\n  // Goku Animations\n  scene.anims.create({\n    key: 'goku_idle',\n    frames: scene.anims.generateFrameNumbers('goku_ssj_spritesheet', {\n      start: 0,\n      end: 0\n    }),\n    frameRate: 1,\n    repeat: -1\n  });\n  scene.anims.create({\n    key: 'goku_walk',\n    frames: scene.anims.generateFrameNumbers('goku_ssj_spritesheet', {\n      start: 1,\n      end: 5\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  scene.anims.create({\n    key: 'goku_punch',\n    frames: scene.anims.generateFrameNumbers('goku_ssj_spritesheet', {\n      start: 6,\n      end: 10\n    }),\n    frameRate: 15,\n    repeat: 0\n  });\n\n  // Vegeta Animations\n  scene.anims.create({\n    key: 'vegeta_idle',\n    frames: scene.anims.generateFrameNumbers('vegeta_spritesheet', {\n      start: 0,\n      end: 0\n    }),\n    frameRate: 1,\n    repeat: -1\n  });\n  scene.anims.create({\n    key: 'vegeta_walk',\n    frames: scene.anims.generateFrameNumbers('vegeta_spritesheet', {\n      start: 1,\n      end: 5\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  scene.anims.create({\n    key: 'vegeta_punch',\n    frames: scene.anims.generateFrameNumbers('vegeta_spritesheet', {\n      start: 6,\n      end: 10\n    }),\n    frameRate: 15,\n    repeat: 0\n  });\n}\nwindow.createAnimations = createAnimations;",
    "createScene": "function createScene(scene) {\n  console.log(\"\u2705 createScene is running\");\n  const gameWidth = scene.sys.game.config.width;\n  const gameHeight = scene.sys.game.config.height;\n  const groundY = gameHeight - 60; // Ground level based on origin 0.5,1 for characters\n\n  // Add Background\n  scene.add.image(gameWidth / 2, gameHeight / 2, 'battle_arena_wasteland').setOrigin(0.5).setScrollFactor(0).setDepth(0);\n\n  // Setup World Bounds\n  scene.physics.world.setBounds(0, 0, 1920, 1080); // Example larger world than viewport\n  scene.physics.world.gravity.y = 0; // As per instruction to keep physics simple for fighting games\n\n  // Draw visible ground\n  const graphics = scene.add.graphics();\n  graphics.fillStyle(0x654321, 1); // Brown color for ground\n  graphics.fillRect(0, groundY, gameWidth, 60);\n\n  // Create invisible ground for physics\n  scene.ground = scene.add.rectangle(gameWidth / 2, groundY + 30, gameWidth, 60, 0x000000, 0); // CenterX, CenterY, Width, Height, Color, Alpha\n  scene.physics.add.existing(scene.ground, true); // true makes it static/immovable\n  scene.ground.body.allowGravity = false;\n  scene.ground.body.immovable = true;\n\n  // Create Player 1 (Goku)\n  scene.player = scene.physics.add.sprite(400, groundY, 'goku_ssj_spritesheet').setScale(0.8).setOrigin(0.5, 1).setDepth(10);\n  scene.player.setCollideWorldBounds(true);\n  scene.player.setBounce(0.1);\n  scene.player.setData('health', 1000);\n  scene.player.setData('energy', 500);\n  scene.player.setData('isAttacking', false);\n  scene.player.play('goku_idle');\n\n  // Create Player 2 (Vegeta) as opponent\n  scene.opponent = scene.physics.add.sprite(gameWidth - 400, groundY, 'vegeta_spritesheet').setScale(0.8).setOrigin(0.5, 1).setFlipX(true).setDepth(10);\n  scene.opponent.setCollideWorldBounds(true);\n  scene.opponent.setBounce(0.1);\n  scene.opponent.setData('health', 1000);\n  scene.opponent.setData('energy', 500);\n  scene.opponent.setData('isAttacking', false);\n  scene.opponent.play('vegeta_idle');\n\n  // Add Collisions\n  scene.physics.add.collider(scene.player, scene.ground);\n  scene.physics.add.collider(scene.opponent, scene.ground);\n  scene.physics.add.collider(scene.player, scene.opponent);\n\n  // Setup Round Delay\n  scene.roundStarted = false;\n  scene.time.delayedCall(2000, () => {\n    scene.roundStarted = true;\n    console.log(\"Round Started!\");\n  }, null, scene);\n\n  // Setup Camera\n  // Bounded camera that smoothly pans to keep both players in view, or zooms out slightly\n  scene.cameras.main.startFollow(scene.player, true, 0.05, 0.05);\n  scene.cameras.main.setZoom(1);\n  scene.cameras.main.setBounds(0, 0, 1920, 1080);\n\n  // Create Projectile Groups\n  scene.playerProjectiles = scene.physics.add.group({\n    classType: Phaser.GameObjects.Sprite,\n    runChildUpdate: true\n  });\n  scene.opponentProjectiles = scene.physics.add.group({\n    classType: Phaser.GameObjects.Sprite,\n    runChildUpdate: true\n  });\n\n  // Add projectile-player collision (placeholders for actual hit logic)\n  scene.physics.add.overlap(scene.opponent, scene.playerProjectiles, (opponent, projectile) => {\n    if (!opponent.getData('isInvulnerable')) {\n        scene.events.emit('player_hit', opponent, 50);\n        projectile.destroy();\n    }\n  }, null, scene);\n  scene.physics.add.overlap(scene.player, scene.opponentProjectiles, (player, projectile) => {\n    if (!player.getData('isInvulnerable')) {\n        scene.events.emit('player_hit', player, 50);\n        projectile.destroy();\n    }\n  }, null, scene);\n\n  // Add Event Listeners for UI / Game Logic\n  scene.events.on('player_hit', (target, damage) => {\n    let currentHealth = target.getData('health');\n    currentHealth -= damage;\n    if (currentHealth < 0) currentHealth = 0;\n    target.setData('health', currentHealth);\n    console.log(`${target.texture.key} hit! Health: ${currentHealth}`);\n\n    // Example: Play hit animation and effect\n    if (!target.getData('isAttacking')) { // Don't override attack animation immediately\n        target.play(target.texture.key.includes('goku') ? 'goku_hurt' : 'vegeta_hurt', true);\n        target.once('animationcomplete', () => {\n            if (!target.getData('isAttacking')) {\n                target.play(target.texture.key.includes('goku') ? 'goku_idle' : 'vegeta_idle', true);\n            }\n        });\n    }\n    scene.add.sprite(target.x, target.y - 50, 'hit_impact_fx').play('hit_impact').once('animationcomplete', (animation, frame) => { frame.gameObject.destroy(); });\n\n    if (currentHealth === 0) {\n      scene.events.emit('round_end', target);\n    }\n  }, scene);\n\n  scene.events.on('round_end', (loser) => {\n    scene.roundStarted = false;\n    console.log(`Round ended! ${loser.texture.key} defeated!`);\n    scene.time.delayedCall(3000, () => { /* Transition to game over/round end screen */ }, null, scene);\n  }, scene);\n\n  // Store game config for easy access in update loop\n  scene.gameplay = scene.sys.game.config.gameplayConfig; // Assuming config injected or retrieved\n}\nwindow.createScene = createScene;",
    "setupControls": "function setupControls(scene) {\n  console.log(\"\u2705 setupControls is running\");\n\n  // Player 1 (Goku) Controls\n  scene.playerKeys = scene.input.keyboard.addKeys({\n    'up': Phaser.Input.Keyboard.KeyCodes.W,\n    'left': Phaser.Input.Keyboard.KeyCodes.A,\n    'down': Phaser.Input.Keyboard.KeyCodes.S,\n    'right': Phaser.Input.Keyboard.KeyCodes.D,\n    'jump': Phaser.Input.Keyboard.KeyCodes.W,\n    'light_punch': Phaser.Input.Keyboard.KeyCodes.J,\n    'heavy_punch': Phaser.Input.Keyboard.KeyCodes.U,\n    'light_kick': Phaser.Input.Keyboard.KeyCodes.K,\n    'heavy_kick': Phaser.Input.Keyboard.KeyCodes.I,\n    'energy_blast': Phaser.Input.Keyboard.KeyCodes.L,\n    'special_modifier': Phaser.Input.Keyboard.KeyCodes.SPACE // Used for Space + L combo\n  });\n\n  // Player 2 (Vegeta) Controls (for multiplayer testing or AI control reference)\n  scene.opponentKeys = scene.input.keyboard.addKeys({\n    'up': Phaser.Input.Keyboard.KeyCodes.UP,\n    'left': Phaser.Input.Keyboard.KeyCodes.LEFT,\n    'down': Phaser.Input.Keyboard.KeyCodes.DOWN,\n    'right': Phaser.Input.Keyboard.KeyCodes.RIGHT,\n    'jump': Phaser.Input.Keyboard.KeyCodes.UP,\n    'light_punch': Phaser.Input.Keyboard.KeyCodes.NUMPAD_4,\n    'heavy_punch': Phaser.Input.Keyboard.KeyCodes.NUMPAD_7,\n    'light_kick': Phaser.Input.Keyboard.KeyCodes.NUMPAD_5,\n    'heavy_kick': Phaser.Input.Keyboard.KeyCodes.NUMPAD_8,\n    'energy_blast': Phaser.Input.Keyboard.KeyCodes.NUMPAD_6,\n    'special_modifier': Phaser.Input.Keyboard.KeyCodes.NUMPAD_0 // Used for NumPad 0 + NumPad 6 combo\n  });\n}\nwindow.setupControls = setupControls;",
    "runCombatLoop": "function runCombatLoop(scene) {\n  if (!scene || !scene.player || !scene.opponent || !scene.playerKeys) {\n    console.error('Scene, player, opponent, or keys are undefined in runCombatLoop');\n    return;\n  }\n\n  const player = scene.player;\n  const opponent = scene.opponent;\n  const playerKeys = scene.playerKeys;\n  const groundY = scene.sys.game.config.height - 60;\n  const playerSpeed = 350;\n  const jumpHeight = 450;\n  const energyBlastCost = 100;\n  const specialMoveCost = 300;\n\n  // Prevent actions if round hasn't started\n  if (!scene.roundStarted) {\n    player.setVelocityX(0);\n    player.play('goku_idle', true);\n    opponent.setVelocityX(0);\n    opponent.play('vegeta_idle', true);\n    return;\n  }\n\n  // --- Player 1 (Goku) Controls and Logic ---\n  player.body.setVelocityX(0);\n\n  // Ensure player is at ground level if not jumping\n  if (player.body.velocity.y === 0 && player.y !== groundY) {\n      player.y = groundY;\n  }\n\n  let isMoving = false;\n  if (playerKeys.left.isDown) {\n    player.setVelocityX(-playerSpeed);\n    player.setFlipX(true);\n    isMoving = true;\n  } else if (playerKeys.right.isDown) {\n    player.setVelocityX(playerSpeed);\n    player.setFlipX(false);\n    isMoving = true;\n  }\n\n  if (playerKeys.jump.isDown && player.body.y >= groundY - 10) { // Simple jump check to simulate onFloor with setGravityY(0)\n    player.setVelocityY(-jumpHeight);\n  }\n\n  // Animations (only if not attacking)\n  if (!player.getData('isAttacking')) {\n    if (isMoving) {\n      player.play('goku_walk', true);\n    } else {\n      player.play('goku_idle', true);\n    }\n  }\n\n  // Attacks\n  if (Phaser.Input.Keyboard.JustDown(playerKeys.light_punch)) {\n    if (!player.getData('isAttacking')) {\n      player.setData('isAttacking', true);\n      player.play('goku_punch', true);\n      // Simulate hit detection for light punch\n      if (Phaser.Math.Distance.Between(player.x, player.y, opponent.x, opponent.y) < 150) {\n        scene.events.emit('player_hit', opponent, 10); // Light damage\n      }\n      player.once('animationcomplete', () => {\n        player.setData('isAttacking', false);\n        player.play('goku_idle', true);\n      });\n    }\n  } else if (Phaser.Input.Keyboard.JustDown(playerKeys.energy_blast)) {\n    if (!player.getData('isAttacking') && player.getData('energy') >= energyBlastCost) {\n      player.setData('isAttacking', true);\n      player.setData('energy', player.getData('energy') - energyBlastCost);\n      player.play('goku_punch', true); // Using punch anim as placeholder for energy blast charge\n      scene.time.delayedCall(500, () => {\n        // Create Kamehameha blast (simple projectile example)\n        const blast = scene.playerProjectiles.create(player.x + (player.flipX ? -70 : 70), player.y - 100, 'kamehameha_fx');\n        blast.setScale(0.5);\n        blast.setVelocityX(player.flipX ? -500 : 500);\n        blast.setCollideWorldBounds(true);\n        blast.body.onWorldBounds = true; // Mark to destroy when out of bounds\n        blast.body.allowGravity = false;\n        blast.play('kamehameha_fx_anim', true); // Assuming an animation key for the effect\n\n        blast.once('animationcomplete', () => { blast.destroy(); });\n        blast.body.world.on('worldbounds', (body) => {\n            if (body.gameObject === blast) { blast.destroy(); }\n        });\n      }, null, scene);\n\n      player.once('animationcomplete', () => {\n        player.setData('isAttacking', false);\n        player.play('goku_idle', true);\n      });\n    }\n  } else if (playerKeys.special_modifier.isDown && Phaser.Input.Keyboard.JustDown(playerKeys.energy_blast)) {\n      if (!player.getData('isAttacking') && player.getData('energy') >= specialMoveCost) {\n          player.setData('isAttacking', true);\n          player.setData('energy', player.getData('energy') - specialMoveCost);\n          player.play('goku_punch', true); // Placeholder for a 'charging' animation\n          scene.time.delayedCall(1000, () => {\n              // Spirit Bomb example: just damage opponent directly for now\n              scene.events.emit('player_hit', opponent, 100); // Heavy damage\n              scene.add.sprite(opponent.x, opponent.y - 150, 'spirit_bomb_fx').play('spirit_bomb_fx_anim').once('animationcomplete', (animation, frame) => { frame.gameObject.destroy(); });\n          }, null, scene);\n          player.once('animationcomplete', () => {\n              player.setData('isAttacking', false);\n              player.play('goku_idle', true);\n          });\n      }\n  }\n\n  // --- Opponent (Vegeta) AI Logic ---\n  opponent.body.setVelocityX(0);\n  // Clamp opponent to ground\n  if (opponent.body.velocity.y === 0 && opponent.y !== groundY) {\n      opponent.y = groundY;\n  }\n\n  const distance = Phaser.Math.Distance.Between(player.x, player.y, opponent.x, opponent.y);\n  const aggroRange = 400;\n  const attackRange = 120;\n\n  if (!opponent.getData('isAttacking')) {\n    if (distance > aggroRange) {\n      // Move towards player\n      if (player.x < opponent.x) {\n        opponent.setVelocityX(-playerSpeed * 0.8);\n        opponent.setFlipX(true);\n      } else {\n        opponent.setVelocityX(playerSpeed * 0.8);\n        opponent.setFlipX(false);\n      }\n      opponent.play('vegeta_walk', true);\n    } else if (distance > attackRange) {\n        // Dash towards player if within aggro but not attack range\n        if (player.x < opponent.x) {\n            opponent.setVelocityX(-700); // Dash speed\n            opponent.setFlipX(true);\n        } else {\n            opponent.setVelocityX(700); // Dash speed\n            opponent.setFlipX(false);\n        }\n        opponent.play('vegeta_walk', true);\n    } else {\n      // Attack if close enough\n      opponent.setVelocityX(0);\n      opponent.play('vegeta_punch', true);\n      opponent.setData('isAttacking', true);\n      if (Phaser.Math.Distance.Between(player.x, player.y, opponent.x, opponent.y) < 150) {\n        scene.events.emit('player_hit', player, 15); // AI heavy damage\n      }\n      opponent.once('animationcomplete', () => {\n        opponent.setData('isAttacking', false);\n        opponent.play('vegeta_idle', true);\n      });\n    }\n  } else {\n    opponent.setVelocityX(0);\n  }\n\n  // Camera follow logic (simplified for single-player follow, blueprint asks for dual player follow/zoom)\n  // This would need more complex logic to calculate mid-point and zoom level\n  const midX = (player.x + opponent.x) / 2;\n  const minX = Math.min(player.x, opponent.x);\n  const maxX = Math.max(player.x, opponent.x);\n  const distanceBetweenPlayers = maxX - minX;\n  const targetZoom = Phaser.Math.Clamp(1 - (distanceBetweenPlayers / (gameWidth * 2)), 0.7, 1);\n  scene.cameras.main.setZoom(targetZoom);\n  scene.cameras.main.centerOn(midX, gameHeight / 2 - 100); // Offset Y slightly for better view\n\n}\nwindow.runCombatLoop = runCombatLoop;"
  },
  "ui_templates": {
    "start_screen": "<div class=\"relative flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-900 to-black text-white font-['Roboto_Mono'] overflow-hidden\">\n  <h1 class=\"text-6xl md:text-8xl font-bold uppercase text-yellow-400 drop-shadow-lg mb-8 animate-pulse-slow tracking-wider\">\n    Saiyan Showdown\n  </h1>\n  <h2 class=\"text-2xl md:text-3xl font-medium text-orange-500 mb-12 animate-fade-in-up\">Z Battle</h2>\n  <div class=\"space-y-6 w-full max-w-sm px-4\">\n    <button class=\"w-full py-4 px-6 bg-gradient-to-r from-blue-600 to-blue-800 text-white text-2xl font-bold uppercase rounded-lg shadow-xl hover:from-blue-700 hover:to-blue-900 transition-all duration-300 transform hover:scale-105 border-2 border-blue-400 focus:outline-none focus:ring-4 focus:ring-blue-300 focus:ring-opacity-75\">Play</button>\n    <button class=\"w-full py-4 px-6 bg-gradient-to-r from-gray-700 to-gray-900 text-white text-2xl font-bold uppercase rounded-lg shadow-xl hover:from-gray-800 hover:to-gray-950 transition-all duration-300 transform hover:scale-105 border-2 border-gray-600 focus:outline-none focus:ring-4 focus:ring-gray-500 focus:ring-opacity-75\">Options</button>\n    <button class=\"w-full py-4 px-6 bg-gradient-to-r from-gray-700 to-gray-900 text-white text-2xl font-bold uppercase rounded-lg shadow-xl hover:from-gray-800 hover:to-gray-950 transition-all duration-300 transform hover:scale-105 border-2 border-gray-600 focus:outline-none focus:ring-4 focus:ring-gray-500 focus:ring-opacity-75\">Credits</button>\n  </div>\n  <!-- Placeholder for dynamic background animation (e.g., Phaser canvas below) -->\n  <div class=\"absolute inset-0 z-[-1] opacity-20\"></div>\n  <style>\n    @keyframes pulse-slow {\n      0%, 100% { text-shadow: 0 0 10px rgba(255,255,0,0.5), 0 0 20px rgba(255,255,0,0.3); }\n      50% { text-shadow: 0 0 15px rgba(255,255,0,0.8), 0 0 30px rgba(255,255,0,0.5); }\n    }\n    .animate-pulse-slow { animation: pulse-slow 4s infinite ease-in-out; }\n    @keyframes fade-in-up {\n      from { opacity: 0; transform: translateY(20px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n    .animate-fade-in-up { animation: fade-in-up 1s ease-out forwards; }\n  </style>\n</div>",
    "character_select_screen": "<div class=\"relative flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-950 to-black text-white font-['Roboto_Mono'] p-4\">\n  <h1 class=\"text-4xl md:text-6xl font-bold uppercase text-yellow-400 mb-8 drop-shadow-lg\">Select Your Warrior</h1>\n  \n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8 w-full max-w-4xl\">\n    <!-- Player 1 Select -->\n    <div class=\"flex flex-col items-center border-4 border-blue-500 rounded-lg p-4 bg-gray-800 bg-opacity-70 shadow-2xl relative\">\n      <h2 class=\"text-2xl font-bold text-blue-300 mb-4\">Player 1</h2>\n      <div class=\"relative w-48 h-48 md:w-64 md:h-64 mb-4 rounded-full overflow-hidden border-4 border-electric-yellow-400 shadow-lg\">\n        <img src=\"assets/ui/goku_portrait.png\" alt=\"Goku\" class=\"w-full h-full object-cover\" />\n        <div class=\"absolute inset-0 bg-blue-500 opacity-20 hover:opacity-0 transition-opacity duration-300 pointer-events-none\"></div>\n      </div>\n      <p class=\"text-3xl font-extrabold text-orange-400 uppercase tracking-wide mb-4\">Goku</p>\n      <div class=\"text-sm text-gray-300 text-center\">\n        <p class=\"mb-1\">Power Level: 9000+</p>\n        <p>Special: Kamehameha, Spirit Bomb</p>\n      </div>\n      <div class=\"absolute inset-0 border-4 border-transparent rounded-lg glow-on-selected transition-all duration-300\"></div>\n    </div>\n\n    <!-- Player 2 Select -->\n    <div class=\"flex flex-col items-center border-4 border-red-500 rounded-lg p-4 bg-gray-800 bg-opacity-70 shadow-2xl relative\">\n      <h2 class=\"text-2xl font-bold text-red-300 mb-4\">Player 2</h2>\n      <div class=\"relative w-48 h-48 md:w-64 md:h-64 mb-4 rounded-full overflow-hidden border-4 border-electric-yellow-400 shadow-lg\">\n        <img src=\"assets/ui/vegeta_portrait.png\" alt=\"Vegeta\" class=\"w-full h-full object-cover\" />\n        <div class=\"absolute inset-0 bg-red-500 opacity-20 hover:opacity-0 transition-opacity duration-300 pointer-events-none\"></div>\n      </div>\n      <p class=\"text-3xl font-extrabold text-orange-400 uppercase tracking-wide mb-4\">Vegeta</p>\n      <div class=\"text-sm text-gray-300 text-center\">\n        <p class=\"mb-1\">Power Level: Over 9000!</p>\n        <p>Special: Galick Gun, Final Flash</p>\n      </div>\n      <div class=\"absolute inset-0 border-4 border-transparent rounded-lg glow-on-selected transition-all duration-300\"></div>\n    </div>\n  </div>\n\n  <button class=\"mt-12 py-4 px-12 bg-gradient-to-r from-green-500 to-green-700 text-white text-3xl font-bold uppercase rounded-lg shadow-xl hover:from-green-600 hover:to-green-800 transition-all duration-300 transform hover:scale-105 border-2 border-green-400 focus:outline-none focus:ring-4 focus:ring-green-300 focus:ring-opacity-75\">Fight!</button>\n\n  <style>\n    .glow-on-selected {\n      box-shadow: 0 0 15px rgba(255, 255, 0, 0.7), inset 0 0 10px rgba(255, 255, 0, 0.5);\n    }\n    /* Example of dynamic animation for selection highlight: */\n    .character-card:hover .glow-on-selected {\n      animation: pulse-glow 1.5s infinite alternate;\n    }\n    @keyframes pulse-glow {\n      from { box-shadow: 0 0 5px rgba(255, 255, 0, 0.5), inset 0 0 3px rgba(255, 255, 0, 0.3); }\n      to { box-shadow: 0 0 25px rgba(255, 255, 0, 1), inset 0 0 15px rgba(255, 255, 0, 0.8); }\n    }\n  </style>\n</div>",
    "hud": "<div class=\"absolute top-0 left-0 right-0 p-4 font-['Roboto_Mono'] text-white z-50 pointer-events-none\">\n  <div class=\"flex justify-between items-start w-full\">\n\n    <!-- Player 1 HUD -->\n    <div class=\"flex flex-col items-start\">\n      <div class=\"flex items-center mb-2\">\n        <img src=\"assets/ui/goku_portrait.png\" alt=\"Goku\" class=\"w-16 h-16 md:w-20 md:h-20 rounded-full border-4 border-blue-500 shadow-lg mr-3\" />\n        <div class=\"relative w-48 h-8 md:w-64 md:h-10 bg-gray-800 rounded-full border-2 border-blue-400 overflow-hidden shadow-inner\">\n          <div id=\"player1-health-bar\" class=\"h-full bg-gradient-to-r from-red-500 to-red-700 transition-all duration-200 ease-out\" style=\"width: 100%;\"></div>\n          <span class=\"absolute inset-0 flex items-center justify-center text-sm md:text-lg font-bold\">1000 / 1000</span>\n        </div>\n      </div>\n      <div class=\"relative w-48 h-6 md:w-64 md:h-8 bg-gray-800 rounded-full border-2 border-orange-400 overflow-hidden shadow-inner ml-auto\">\n        <div id=\"player1-energy-bar\" class=\"h-full bg-gradient-to-r from-electric-yellow-400 to-orange-500 transition-all duration-200 ease-out\" style=\"width: 100%;\"></div>\n        <span class=\"absolute inset-0 flex items-center justify-center text-xs md:text-sm font-bold\">500 / 500 KI</span>\n      </div>\n    </div>\n\n    <!-- Round Counter -->\n    <div class=\"flex flex-col items-center mt-2\">\n      <div class=\"text-3xl md:text-5xl font-extrabold text-yellow-400 uppercase drop-shadow-lg round-counter\">Round 1</div>\n      <div class=\"text-xl md:text-3xl font-bold text-orange-500 mt-1 time-counter\">99</div>\n    </div>\n\n    <!-- Player 2 HUD -->\n    <div class=\"flex flex-col items-end\">\n      <div class=\"flex items-center mb-2\">\n        <div class=\"relative w-48 h-8 md:w-64 md:h-10 bg-gray-800 rounded-full border-2 border-red-400 overflow-hidden shadow-inner mr-3\">\n          <div id=\"player2-health-bar\" class=\"h-full bg-gradient-to-r from-red-500 to-red-700 transition-all duration-200 ease-out\" style=\"width: 100%;\"></div>\n          <span class=\"absolute inset-0 flex items-center justify-center text-sm md:text-lg font-bold\">1000 / 1000</span>\n        </div>\n        <img src=\"assets/ui/vegeta_portrait.png\" alt=\"Vegeta\" class=\"w-16 h-16 md:w-20 md:h-20 rounded-full border-4 border-red-500 shadow-lg\" />\n      </div>\n      <div class=\"relative w-48 h-6 md:w-64 md:h-8 bg-gray-800 rounded-full border-2 border-orange-400 overflow-hidden shadow-inner mr-auto\">\n        <div id=\"player2-energy-bar\" class=\"h-full bg-gradient-to-r from-electric-yellow-400 to-orange-500 transition-all duration-200 ease-out\" style=\"width: 100%;\"></div>\n        <span class=\"absolute inset-0 flex items-center justify-center text-xs md:text-sm font-bold\">500 / 500 KI</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Combo Counter (example, positioned above character in game via JS) -->\n  <div id=\"combo-counter\" class=\"absolute hidden text-3xl md:text-5xl font-extrabold text-electric-yellow-400 drop-shadow-lg combo-text transform -translate-x-1/2 left-1/2 top-[50%] animate-combo-pop opacity-0 pointer-events-none\">\n    <span class=\"combo-number\">3</span> Hit Combo!\n  </div>\n\n  <style>\n    .animate-combo-pop {\n      animation: comboPop 0.8s ease-out forwards;\n    }\n    @keyframes comboPop {\n      0% { transform: scale(0.5) translateY(50px); opacity: 0; }\n      50% { transform: scale(1.2) translateY(-20px); opacity: 1; }\n      100% { transform: scale(1) translateY(0px); opacity: 1; }\n    }\n  </style>\n</div>",
    "prompt_input_box": "<div class=\"fixed bottom-0 left-0 right-0 p-4 bg-gray-900 bg-opacity-80 backdrop-blur-sm border-t-2 border-blue-700 flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-4 z-50\">\n  <input type=\"text\" placeholder=\"Enter command or query...\" class=\"flex-grow p-3 md:p-4 rounded-lg bg-gray-700 text-white border-2 border-blue-500 focus:outline-none focus:ring-4 focus:ring-electric-yellow-400 focus:border-electric-yellow-400 text-base md:text-lg shadow-inner placeholder-gray-400\" />\n  <button class=\"w-full md:w-auto py-3 px-6 bg-gradient-to-r from-blue-600 to-blue-800 text-white text-lg font-bold uppercase rounded-lg shadow-xl hover:from-blue-700 hover:to-blue-900 transition-all duration-300 transform hover:scale-105 border-2 border-blue-400 focus:outline-none focus:ring-4 focus:ring-blue-300 focus:ring-opacity-75\">Send Command</button>\n</div>"
  },
  "dynamic_loading_plan": [
    {
      "type": "character",
      "name": "goku_ssj_spritesheet",
      "placeholder_url": "assets/characters/goku_ssj_spritesheet.png",
      "frame_dimensions": "140x218",
      "load_order": "preload"
    },
    {
      "type": "character",
      "name": "vegeta_spritesheet",
      "placeholder_url": "assets/characters/vegeta_spritesheet.png",
      "frame_dimensions": "140x218",
      "load_order": "preload"
    },
    {
      "type": "character",
      "name": "goku_portrait",
      "placeholder_url": "assets/ui/goku_portrait.png",
      "dimensions": "256x256",
      "load_order": "preload"
    },
    {
      "type": "character",
      "name": "vegeta_portrait",
      "placeholder_url": "assets/ui/vegeta_portrait.png",
      "dimensions": "256x256",
      "load_order": "preload"
    },
    {
      "type": "background",
      "name": "battle_arena_wasteland",
      "placeholder_url": "assets/backgrounds/battle_arena_wasteland.png",
      "dimensions": "1920x1080",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "kamehameha_fx",
      "placeholder_url": "assets/effects/kamehameha_fx.png",
      "frame_dimensions": "512x256",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "spirit_bomb_fx",
      "placeholder_url": "assets/effects/spirit_bomb_fx.png",
      "frame_dimensions": "512x512",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "galick_gun_fx",
      "placeholder_url": "assets/effects/galick_gun_fx.png",
      "frame_dimensions": "512x256",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "final_flash_fx",
      "placeholder_url": "assets/effects/final_flash_fx.png",
      "frame_dimensions": "1024x512",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "hit_impact_fx",
      "placeholder_url": "assets/effects/hit_impact_fx.png",
      "frame_dimensions": "256x256",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "combo_fx",
      "placeholder_url": "assets/effects/combo_fx.png",
      "frame_dimensions": "256x256",
      "load_order": "preload"
    },
    {
      "type": "ui",
      "name": "health_bar_fill",
      "placeholder_url": "assets/ui/health_bar_fill.png",
      "dimensions": "256x32",
      "load_order": "preload"
    },
    {
      "type": "ui",
      "name": "energy_bar_fill",
      "placeholder_url": "assets/ui/energy_bar_fill.png",
      "dimensions": "256x32",
      "load_order": "preload"
    },
    {
      "type": "ui",
      "name": "round_counter_bg",
      "placeholder_url": "assets/ui/round_counter_bg.png",
      "dimensions": "128x128",
      "load_order": "preload"
    },
    {
      "type": "audio",
      "name": "battle_music",
      "placeholder_url": "assets/audio/battle_music.mp3",
      "load_order": "preload"
    },
    {
      "type": "audio",
      "name": "punch_sfx",
      "placeholder_url": "assets/audio/punch_sfx.wav",
      "load_order": "lazy"
    },
    {
      "type": "audio",
      "name": "kick_sfx",
      "placeholder_url": "assets/audio/kick_sfx.wav",
      "load_order": "lazy"
    },
    {
      "type": "audio",
      "name": "blast_sfx",
      "placeholder_url": "assets/audio/blast_sfx.wav",
      "load_order": "lazy"
    },
    {
      "type": "audio",
      "name": "hit_sfx",
      "placeholder_url": "assets/audio/hit_sfx.wav",
      "load_order": "lazy"
    },
    {
      "type": "audio",
      "name": "jump_sfx",
      "placeholder_url": "assets/audio/jump_sfx.wav",
      "load_order": "lazy"
    }
  ]
}