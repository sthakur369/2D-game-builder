{
  "asset_prompts": {
    "characters": {
      "Goku (Super Saiyan)": "Full body sprite sheet of Goku in Super Saiyan form. High-quality 2D anime game assets, cel-shaded, vibrant colors, dynamic action poses. Include frames for: idle (breathing, slight energy aura), walk, run, jump (mid-air pose), land, crouch, block, punch (light, heavy), kick (light, heavy), hit reaction (flinching, staggered), knocked down (on ground), getting up, Kamehameha charge (hands cupped, glowing energy builds), Kamehameha blast (energy beam emission, powerful force), Spirit Bomb charge (hands raised, swirling energy forms above), Spirit Bomb release (throwing massive energy sphere), dash (blur effect). Character should be in a side-view perspective, facing left and right. Resolution: 512x512 pixels per frame, with transparent backgrounds.",
      "Vegeta (Super Saiyan)": "Full body sprite sheet of Vegeta in Super Saiyan form. High-quality 2D anime game assets, cel-shaded, vibrant colors, dynamic action poses. Include frames for: idle (confident stance, slight energy aura), walk, run, jump (mid-air pose), land, crouch, block, punch (light, heavy), kick (light, heavy), hit reaction (flinching, staggered), knocked down (on ground), getting up, Galick Gun charge (hands gathered, purple energy builds), Galick Gun blast (purple energy beam emission, intense force), Final Flash charge (arms wide, massive yellow energy builds), Final Flash release (powerful wide beam, devastating), dash (blur effect). Character should be in a side-view perspective, facing left and right. Resolution: 512x512 pixels per frame, with transparent backgrounds."
    },
    "backgrounds": {
      "battle_arena_desert": "High resolution 2D anime background art of a deserted rocky landscape. The scene features shattered cliffs, jagged rock formations, and distant, stylized mountains under a dramatic, vibrant anime sky with swirling clouds and a dominant sun. Subtle atmospheric effects like faint dust clouds, shimmering air from ki exertion, and slight energetic aura emanations from the ground. The lighting is bright daylight with dynamic, sharp shadows. Perspective: Wide-angle scenic view capturing the vastness. Resolution: 1920x1080 pixels."
    },
    "effects": {
      "Kamehameha": "2D anime energy effect sprite sheet: 'Kamehameha' blast. A powerful, concentrated blue-white energy beam with fiery elements, particle trails, and a glowing core. Include frames for charging (energy accumulating), beam emission (sustained stream), and impact explosion. Style: Cel-shaded, vibrant, dynamic. Resolution: 512x256 pixels for beam segment, 512x512 pixels for explosion, transparent background.",
      "Spirit Bomb": "2D anime energy effect sprite sheet: 'Spirit Bomb' massive energy sphere. A large, swirling orb composed of various colors (blue, white, yellow, green) representing collected energy, with a strong glowing aura and faint electrical sparks. Include frames for formation (gathering), sustained state (hovering), and release (fading out upon throw). Style: Cel-shaded, vibrant, detailed, powerful. Resolution: 512x512 pixels, transparent background.",
      "Galick Gun": "2D anime energy effect sprite sheet: 'Galick Gun' blast. A powerful, concentrated purple energy beam with dark accents, intense particle trails, and a strong glowing core. Include frames for charging (energy accumulating), beam emission (sustained stream), and impact explosion. Style: Cel-shaded, vibrant, dynamic. Resolution: 512x256 pixels for beam segment, 512x512 pixels for explosion, transparent background.",
      "Final Flash": "2D anime energy effect sprite sheet: 'Final Flash' wide energy beam. A massive, golden-yellow energy wave, expanding wide with explosive power, intense light, and numerous particle effects. Include frames for initial burst, sustained wide beam, and explosive impact. Style: Cel-shaded, highly energetic, vibrant, devastating. Resolution: 1024x512 pixels for beam, 1024x1024 pixels for explosion, transparent background.",
      "Hit Effect": "2D anime impact effect sprite sheet: A burst of light, jagged energy lines, and small particles radiating outwards from a central point, signifying a strong hit. Color palette: Yellow, orange, red, white. Style: Energetic, sharp, cartoonish. Resolution: 256x256 pixels, transparent background.",
      "Dust Cloud (Dash/Jump)": "2D anime effect sprite sheet: Small, brief dust clouds for character movement (dash, jump start/land). Include frames for subtle poof, rising, and dissipation. Style: Soft, dynamic, cartoonish. Resolution: 128x64 pixels, transparent background."
    }
  },
  "phaser_modules": {
    "loadAssets": "import Phaser from 'phaser';\n\nexport function loadAssets(scene) {\n    // Background\n    scene.load.image('battle_arena_desert', '/assets/backgrounds/battle_arena_desert.png');\n\n    // Characters (assuming 512x512 frames for now, adjust based on actual spritesheets)\n    scene.load.spritesheet('goku_ssj', '/assets/characters/goku_ssj_spritesheet.png', {\n        frameWidth: 512,\n        frameHeight: 512\n    });\n    scene.load.spritesheet('vegeta_ssj', '/assets/characters/vegeta_ssj_spritesheet.png', {\n        frameWidth: 512,\n        frameHeight: 512\n    });\n\n    // Special Effects\n    scene.load.spritesheet('kamehameha_fx', '/assets/effects/kamehameha_fx.png', {\n        frameWidth: 512,\n        frameHeight: 256 // Adjust as per asset prompt for beam segment\n    });\n    scene.load.spritesheet('spirit_bomb_fx', '/assets/effects/spirit_bomb_fx.png', {\n        frameWidth: 512,\n        frameHeight: 512\n    });\n    scene.load.spritesheet('galick_gun_fx', '/assets/effects/galick_gun_fx.png', {\n        frameWidth: 512,\n        frameHeight: 256\n    });\n    scene.load.spritesheet('final_flash_fx', '/assets/effects/final_flash_fx.png', {\n        frameWidth: 1024,\n        frameHeight: 512\n    });\n    scene.load.spritesheet('hit_fx', '/assets/effects/hit_fx.png', {\n        frameWidth: 256,\n        frameHeight: 256\n    });\n    scene.load.spritesheet('dust_fx', '/assets/effects/dust_fx.png', {\n        frameWidth: 128,\n        frameHeight: 64\n    });\n\n    // UI Elements (if any static images are needed, e.g., portraits for HUD)\n    scene.load.image('goku_portrait', '/assets/ui/goku_portrait.png');\n    scene.load.image('vegeta_portrait', '/assets/ui/vegeta_portrait.png');\n\n    // Audio\n    scene.load.audio('battle_music', '/assets/audio/battle_music.mp3');\n    scene.load.audio('kamehameha_sfx', '/assets/audio/kamehameha.wav');\n    scene.load.audio('punch_sfx', '/assets/audio/punch.wav');\n    scene.load.audio('hit_sfx', '/assets/audio/hit.wav');\n    // ... more SFX\n}\n",
    "createAnimations": "import Phaser from 'phaser';\n\nexport function createAnimations(scene) {\n    // Goku (Super Saiyan) Animations\n    scene.anims.create({\n        key: 'goku_idle',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 0, end: 3 }),\n        frameRate: 8,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'goku_walk',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 4, end: 9 }),\n        frameRate: 12,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'goku_run',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 10, end: 15 }),\n        frameRate: 18,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'goku_jump',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 16, end: 17 }),\n        frameRate: 10,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_punch',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 18, end: 21 }),\n        frameRate: 15,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_kick',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 22, end: 25 }),\n        frameRate: 15,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_block',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 26, end: 26 }),\n        frameRate: 1,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_kamehameha_charge',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 27, end: 30 }),\n        frameRate: 10,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_kamehameha_blast',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 31, end: 34 }),\n        frameRate: 15,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_spirit_bomb_charge',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 35, end: 38 }),\n        frameRate: 8,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_spirit_bomb_release',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 39, end: 42 }),\n        frameRate: 12,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_hit',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 43, end: 44 }),\n        frameRate: 10,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'goku_knocked_down',\n        frames: scene.anims.generateFrameNumbers('goku_ssj', { start: 45, end: 46 }),\n        frameRate: 5,\n        repeat: 0\n    });\n\n    // Vegeta (Super Saiyan) Animations\n    scene.anims.create({\n        key: 'vegeta_idle',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 0, end: 3 }),\n        frameRate: 8,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'vegeta_walk',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 4, end: 9 }),\n        frameRate: 12,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'vegeta_run',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 10, end: 15 }),\n        frameRate: 18,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'vegeta_jump',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 16, end: 17 }),\n        frameRate: 10,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_punch',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 18, end: 21 }),\n        frameRate: 15,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_kick',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 22, end: 25 }),\n        frameRate: 15,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_block',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 26, end: 26 }),\n        frameRate: 1,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_galick_gun_charge',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 27, end: 30 }),\n        frameRate: 10,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_galick_gun_blast',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 31, end: 34 }),\n        frameRate: 15,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_final_flash_charge',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 35, end: 38 }),\n        frameRate: 8,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_final_flash_release',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 39, end: 42 }),\n        frameRate: 12,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_hit',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 43, end: 44 }),\n        frameRate: 10,\n        repeat: 0\n    });\n    scene.anims.create({\n        key: 'vegeta_knocked_down',\n        frames: scene.anims.generateFrameNumbers('vegeta_ssj', { start: 45, end: 46 }),\n        frameRate: 5,\n        repeat: 0\n    });\n\n    // FX Animations\n    scene.anims.create({\n        key: 'kamehameha_beam',\n        frames: scene.anims.generateFrameNumbers('kamehameha_fx', { start: 0, end: 3 }),\n        frameRate: 10,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'spirit_bomb_orb',\n        frames: scene.anims.generateFrameNumbers('spirit_bomb_fx', { start: 0, end: 5 }),\n        frameRate: 8,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'galick_gun_beam',\n        frames: scene.anims.generateFrameNumbers('galick_gun_fx', { start: 0, end: 3 }),\n        frameRate: 10,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'final_flash_beam',\n        frames: scene.anims.generateFrameNumbers('final_flash_fx', { start: 0, end: 3 }),\n        frameRate: 10,\n        repeat: -1\n    });\n    scene.anims.create({\n        key: 'hit_impact',\n        frames: scene.anims.generateFrameNumbers('hit_fx', { start: 0, end: 4 }),\n        frameRate: 15,\n        repeat: 0,\n        hideOnComplete: true\n    });\n    scene.anims.create({\n        key: 'dust_puff',\n        frames: scene.anims.generateFrameNumbers('dust_fx', { start: 0, end: 3 }),\n        frameRate: 8,\n        repeat: 0,\n        hideOnComplete: true\n    });\n}\n",
    "createScene": "import Phaser from 'phaser';\n\nexport function createScene(scene) {\n    // Add background\n    scene.add.image(scene.sys.game.config.width / 2, scene.sys.game.config.height / 2, 'battle_arena_desert').setOrigin(0.5).setScrollFactor(0);\n\n    // Setup world bounds\n    scene.physics.world.setBounds(0, 0, 1920, 1080); // Assuming background width 1920\n\n    // Player Character\n    scene.player = scene.physics.add.sprite(200, scene.sys.game.config.height - 200, 'goku_ssj').setScale(0.5); // Adjust scale for visual fit\n    scene.player.setCollideWorldBounds(true);\n    scene.player.setGravityY(1500);\n    scene.player.body.setSize(150, 400); // Adjust hitbox for character\n    scene.player.body.offset.x = 180;\n    scene.player.body.offset.y = 100;\n    scene.player.setBounce(0.1);\n    scene.player.setData('health', 1000);\n    scene.player.setData('energy', 0);\n    scene.player.play('goku_idle');\n\n    // AI Character\n    scene.opponent = scene.physics.add.sprite(scene.sys.game.config.width - 200, scene.sys.game.config.height - 200, 'vegeta_ssj').setScale(0.5);\n    scene.opponent.setCollideWorldBounds(true);\n    scene.opponent.setGravityY(1500);\n    scene.opponent.body.setSize(150, 400); // Adjust hitbox for character\n    scene.opponent.body.offset.x = 180;\n    scene.opponent.body.offset.y = 100;\n    scene.opponent.setBounce(0.1);\n    scene.opponent.setData('health', 1000);\n    scene.opponent.setData('energy', 0);\n    scene.opponent.setFlipX(true); // Face player\n    scene.opponent.play('vegeta_idle');\n\n    // Camera Setup\n    scene.cameras.main.startFollow(scene.player, true, 0.05, 0.05);\n    scene.cameras.main.setBounds(0, 0, 1920, scene.sys.game.config.height);\n    scene.cameras.main.setZoom(1); // Default zoom\n\n    // Music\n    scene.music = scene.sound.add('battle_music', { loop: true, volume: 0.6 });\n    scene.music.play();\n\n    // Add physics collider between player and opponent\n    scene.physics.add.collider(scene.player, scene.opponent);\n\n    // Group for projectiles (Kamehameha, etc.)\n    scene.playerProjectiles = scene.physics.add.group({\n        classType: Phaser.Physics.Arcade.Sprite,\n        runChildUpdate: true\n    });\n    scene.opponentProjectiles = scene.physics.add.group({\n        classType: Phaser.Physics.Arcade.Sprite,\n        runChildUpdate: true\n    });\n\n    // Setup collision for projectiles\n    scene.physics.add.overlap(scene.playerProjectiles, scene.opponent, (projectile, target) => {\n        projectile.destroy();\n        scene.events.emit('player_hit', target, projectile.getData('damage'));\n    }, null, scene);\n    scene.physics.add.overlap(scene.opponentProjectiles, scene.player, (projectile, target) => {\n        projectile.destroy();\n        scene.events.emit('player_hit', target, projectile.getData('damage'));\n    }, null, scene);\n\n    // Dummy event listeners for UI updates (handled by React)\n    scene.events.on('update_health', (characterName, healthValue) => {\n        // This event will be caught by React UI component\n        // console.log(`${characterName} health: ${healthValue}`);\n    });\n    scene.events.on('update_energy', (characterName, energyValue) => {\n        // This event will be caught by React UI component\n        // console.log(`${characterName} energy: ${energyValue}`);\n    });\n    scene.events.on('display_combo', (count) => {\n        // console.log(`Combo: ${count}`);\n    });\n    scene.events.on('round_end', (winner) => {\n        // console.log(`Round ended. Winner: ${winner}`);\n    });\n}\n",
    "setupControls": "import Phaser from 'phaser';\n\nexport function setupControls(scene) {\n    scene.keys = scene.input.keyboard.addKeys({\n        'up': Phaser.Input.Keyboard.KeyCodes.W,\n        'left': Phaser.Input.Keyboard.KeyCodes.A,\n        'down': Phaser.Input.Keyboard.KeyCodes.S,\n        'right': Phaser.Input.Keyboard.KeyCodes.D,\n        'attack_light': Phaser.Input.Keyboard.KeyCodes.J,\n        'attack_heavy': Phaser.Input.Keyboard.KeyCodes.K,\n        'special_attack': Phaser.Input.Keyboard.KeyCodes.L,\n        'ultimate_attack': Phaser.Input.Keyboard.KeyCodes.I,\n        'dash': Phaser.Input.Keyboard.KeyCodes.SPACE\n    });\n\n    // Example of a control event listener (can be moved to update loop for continuous actions)\n    scene.keys.special_attack.on('down', () => {\n        if (scene.player.body.onFloor()) {\n            // Trigger special attack animation and logic\n            scene.player.setVelocityX(0);\n            scene.player.play('goku_kamehameha_charge', true);\n            // This should then lead to launching a projectile after a delay\n            scene.time.delayedCall(500, () => {\n                // Logic to launch Kamehameha projectile\n                if (scene.player.getData('energy') >= 20) {\n                    const projectile = scene.playerProjectiles.create(scene.player.x + (scene.player.flipX ? -100 : 100), scene.player.y - 50, 'kamehameha_fx');\n                    projectile.setCollideWorldBounds(false);\n                    projectile.body.allowGravity = false;\n                    projectile.setVelocityX(scene.player.flipX ? -600 : 600);\n                    projectile.setData('damage', 50);\n                    projectile.play('kamehameha_beam', true);\n                    scene.sound.play('kamehameha_sfx');\n                    scene.player.setData('energy', scene.player.getData('energy') - 20);\n                    scene.events.emit('update_energy', 'player', scene.player.getData('energy'));\n                }\n            });\n        }\n    });\n\n    // Add specific keyup listeners for actions that should only trigger once per press\n    scene.keys.jump.on('down', () => {\n        if (scene.player.body.onFloor()) {\n            scene.player.setVelocityY(-550); // Jump height\n            scene.player.play('goku_jump', true);\n        }\n    });\n    scene.keys.dash.on('down', () => {\n        scene.player.setVelocityX(scene.player.flipX ? -800 : 800); // Dash speed\n        scene.player.play('goku_run', true); // Or a specific dash animation\n        scene.time.delayedCall(150, () => scene.player.setVelocityX(0)); // Stop dash after brief period\n    });\n}\n",
    "runCombatLoop": "import Phaser from 'phaser';\n\nexport function runCombatLoop(scene, delta) {\n    const player = scene.player;\n    const opponent = scene.opponent;\n    const keys = scene.keys;\n\n    // Player Movement and Animation Logic\n    if (!player.body.enable) return; // If player is knocked out, disable controls\n\n    if (keys.left.isDown) {\n        player.setVelocityX(-400);\n        player.setFlipX(true);\n        if (player.body.onFloor()) player.play('goku_walk', true);\n    } else if (keys.right.isDown) {\n        player.setVelocityX(400);\n        player.setFlipX(false);\n        if (player.body.onFloor()) player.play('goku_walk', true);\n    } else {\n        player.setVelocityX(0);\n        if (player.body.onFloor()) player.play('goku_idle', true);\n    }\n\n    if (keys.down.isDown) {\n        // Crouching/Blocking logic\n        player.play('goku_block', true);\n        player.setVelocityX(0);\n    }\n\n    if (keys.attack_light.isDown && player.body.onFloor()) {\n        // Simple attack animation trigger\n        if (!player.anims.isPlaying || player.anims.currentAnim.key.includes('idle')) {\n            player.play('goku_punch', true);\n            scene.sound.play('punch_sfx');\n            // Add hitbox detection here for damage application\n            // Increase energy meter\n            player.setData('energy', Math.min(100, player.getData('energy') + 1));\n            scene.events.emit('update_energy', 'player', player.getData('energy'));\n        }\n    }\n\n    // AI Movement and Attack Logic (Simple Example)\n    if (opponent.body.enable) {\n        const distance = Phaser.Math.Distance.Between(player.x, player.y, opponent.x, opponent.y);\n        const speed = 200; // AI speed\n\n        if (distance > 200) { // If far, move closer\n            if (player.x < opponent.x) {\n                opponent.setVelocityX(-speed);\n                opponent.setFlipX(true);\n                opponent.play('vegeta_walk', true);\n            } else if (player.x > opponent.x) {\n                opponent.setVelocityX(speed);\n                opponent.setFlipX(false);\n                opponent.play('vegeta_walk', true);\n            }\n        } else if (distance < 100) { // If too close, move back slightly\n             if (player.x < opponent.x) {\n                opponent.setVelocityX(speed * 0.5);\n                opponent.setFlipX(false);\n                opponent.play('vegeta_walk', true);\n            } else if (player.x > opponent.x) {\n                opponent.setVelocityX(-speed * 0.5);\n                opponent.setFlipX(true);\n                opponent.play('vegeta_walk', true);\n            }\n        } else { // In attack range\n            opponent.setVelocityX(0);\n            opponent.play('vegeta_idle', true);\n            // Simple attack decision\n            if (Math.random() < 0.01 && opponent.body.onFloor()) { // Random chance to attack\n                if (opponent.getData('energy') >= 20 && Math.random() < 0.5) {\n                     // Perform special attack (Galick Gun)\n                    opponent.play('vegeta_galick_gun_charge', true);\n                    scene.time.delayedCall(500, () => {\n                        const projectile = scene.opponentProjectiles.create(opponent.x + (opponent.flipX ? -100 : 100), opponent.y - 50, 'galick_gun_fx');\n                        projectile.setCollideWorldBounds(false);\n                        projectile.body.allowGravity = false;\n                        projectile.setVelocityX(opponent.flipX ? -600 : 600);\n                        projectile.setData('damage', 50);\n                        projectile.play('galick_gun_beam', true);\n                        scene.sound.play('kamehameha_sfx'); // Placeholder SFX\n                        opponent.setData('energy', opponent.getData('energy') - 20);\n                        scene.events.emit('update_energy', 'opponent', opponent.getData('energy'));\n                    });\n                } else if (!opponent.anims.isPlaying || opponent.anims.currentAnim.key.includes('idle')) {\n                    opponent.play('vegeta_punch', true);\n                    scene.sound.play('punch_sfx');\n                    opponent.setData('energy', Math.min(100, opponent.getData('energy') + 1));\n                    scene.events.emit('update_energy', 'opponent', opponent.getData('energy'));\n                }\n            }\n        }\n    }\n\n    // Health Reduction Logic (example, typically handled by collision callbacks)\n    scene.events.on('player_hit', (target, damage) => {\n        let currentHealth = target.getData('health');\n        currentHealth -= damage;\n        target.setData('health', currentHealth);\n        target.play(target === player ? 'goku_hit' : 'vegeta_hit', true);\n        scene.sound.play('hit_sfx');\n        // Emit update to React UI\n        scene.events.emit('update_health', target === player ? 'player' : 'opponent', currentHealth);\n\n        if (currentHealth <= 0) {\n            target.setVelocityX(0);\n            target.setVelocityY(0);\n            target.body.enable = false; // Disable physics body\n            target.play(target === player ? 'goku_knocked_down' : 'vegeta_knocked_down', true);\n            scene.events.emit('round_end', target === player ? 'opponent' : 'player');\n        }\n\n        // Display hit effect visually\n        const hitEffect = scene.add.sprite(target.x, target.y - 50, 'hit_fx');\n        hitEffect.play('hit_impact');\n        hitEffect.once('animationcomplete', () => hitEffect.destroy());\n    });\n}\n"
  },
  "ui_templates": {
    "start_screen": "<div class=\"relative flex flex-col items-center justify-center min-h-screen bg-cover bg-center\" style=\"background-image: url('/assets/backgrounds/start_screen_bg.jpg');\">\n  <div class=\"absolute inset-0 bg-black opacity-70\"></div>\n  <div class=\"relative z-10 p-8 md:p-12 bg-gradient-to-br from-indigo-900 via-purple-900 to-indigo-900 rounded-lg shadow-2xl border-4 border-purple-700 transform hover:scale-105 transition-transform duration-300\">\n    <h1 class=\"text-5xl md:text-7xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-red-500 mb-8 text-center drop-shadow-lg leading-tight\" style=\"-webkit-text-stroke: 1px #8B0000;\">Dragon Ball Z:<br/>Ki Clash</h1>\n    <div class=\"flex flex-col space-y-4 md:space-y-6\">\n      <button class=\"px-8 py-4 text-xl md:text-2xl font-bold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200 uppercase tracking-wide border-2 border-blue-400 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-50 transform hover:scale-105 active:scale-95 glow-on-hover\">\n        Play Game\n      </button>\n      <button class=\"px-8 py-4 text-xl md:text-2xl font-bold text-white bg-gray-700 rounded-lg shadow-md hover:bg-gray-800 transition-colors duration-200 uppercase tracking-wide border-2 border-gray-500 focus:outline-none focus:ring-4 focus:ring-gray-600 focus:ring-opacity-50 transform hover:scale-105 active:scale-95\">\n        Options\n      </button>\n      <button class=\"px-8 py-4 text-xl md:text-2xl font-bold text-white bg-gray-700 rounded-lg shadow-md hover:bg-gray-800 transition-colors duration-200 uppercase tracking-wide border-2 border-gray-500 focus:outline-none focus:ring-4 focus:ring-gray-600 focus:ring-opacity-50 transform hover:scale-105 active:scale-95\">\n        Credits\n      </button>\n      <button class=\"px-8 py-4 text-xl md:text-2xl font-bold text-white bg-red-600 rounded-lg shadow-md hover:bg-red-700 transition-colors duration-200 uppercase tracking-wide border-2 border-red-400 focus:outline-none focus:ring-4 focus:ring-red-500 focus:ring-opacity-50 transform hover:scale-105 active:scale-95\">\n        Exit Game\n      </button>\n    </div>\n  </div>\n</div>\n<style>\n  @keyframes glow {\n    0% { box-shadow: 0 0 5px #00BFFF, 0 0 10px #00BFFF, 0 0 15px #00BFFF; }\n    50% { box-shadow: 0 0 10px #00BFFF, 0 0 20px #00BFFF, 0 0 30px #00BFFF; }\n    100% { box-shadow: 0 0 5px #00BFFF, 0 0 10px #00BFFF, 0 0 15px #00BFFF; }\n  }\n  .glow-on-hover:hover {\n    animation: glow 1.5s ease-in-out infinite alternate;\n  }\n</style>\n",
    "character_select_screen": "<div class=\"relative flex flex-col items-center justify-center min-h-screen bg-cover bg-center p-4\" style=\"background-image: url('/assets/backgrounds/character_select_bg.jpg');\">\n  <div class=\"absolute inset-0 bg-black opacity-70\"></div>\n  <div class=\"relative z-10 w-full max-w-6xl bg-gradient-to-br from-gray-800 via-gray-900 to-gray-800 rounded-lg shadow-2xl border-4 border-gray-700 p-6 md:p-8\">\n    <h2 class=\"text-4xl md:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-teal-300 to-cyan-500 mb-8 text-center drop-shadow-lg leading-tight\" style=\"-webkit-text-stroke: 1px #008B8B;\">Select Your Warrior</h2>\n\n    <div class=\"flex flex-col md:flex-row justify-around items-center space-y-8 md:space-y-0 md:space-x-8 mb-12\">\n      <!-- Player 1 Selection -->\n      <div class=\"flex flex-col items-center p-6 bg-gradient-to-br from-blue-900 to-blue-700 rounded-lg shadow-xl border-4 border-blue-500 w-full md:w-1/2 group transition-all duration-300 hover:shadow-blue-500/50 hover:border-blue-300\">\n        <h3 class=\"text-3xl font-bold text-white mb-4 text-shadow-md\">Player 1</h3>\n        <div class=\"w-48 h-48 md:w-64 md:h-64 mb-6 relative overflow-hidden rounded-full bg-gray-900 border-4 border-blue-400 flex items-center justify-center transform group-hover:scale-105 transition-transform duration-300\">\n          <img src=\"/assets/characters/goku_portrait.png\" alt=\"Goku Portrait\" class=\"w-full h-full object-cover scale-110 transform transition-transform duration-500 group-hover:scale-100\" />\n          <div class=\"absolute inset-0 bg-gradient-to-t from-transparent to-blue-500 opacity-20\"></div>\n        </div>\n        <p class=\"text-3xl font-extrabold text-yellow-300 mb-6 drop-shadow-lg\">Goku (Super Saiyan)</p>\n        <div class=\"grid grid-cols-2 gap-4 w-full\">\n          <button class=\"px-4 py-2 text-lg font-bold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200 border-2 border-blue-400\">Previous</button>\n          <button class=\"px-4 py-2 text-lg font-bold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200 border-2 border-blue-400\">Next</button>\n        </div>\n      </div>\n\n      <!-- AI Selection -->\n      <div class=\"flex flex-col items-center p-6 bg-gradient-to-br from-red-900 to-red-700 rounded-lg shadow-xl border-4 border-red-500 w-full md:w-1/2 group transition-all duration-300 hover:shadow-red-500/50 hover:border-red-300\">\n        <h3 class=\"text-3xl font-bold text-white mb-4 text-shadow-md\">VS AI</h3>\n        <div class=\"w-48 h-48 md:w-64 md:h-64 mb-6 relative overflow-hidden rounded-full bg-gray-900 border-4 border-red-400 flex items-center justify-center transform group-hover:scale-105 transition-transform duration-300\">\n          <img src=\"/assets/characters/vegeta_portrait.png\" alt=\"Vegeta Portrait\" class=\"w-full h-full object-cover scale-110 transform transition-transform duration-500 group-hover:scale-100\" />\n          <div class=\"absolute inset-0 bg-gradient-to-t from-transparent to-red-500 opacity-20\"></div>\n        </div>\n        <p class=\"text-3xl font-extrabold text-purple-300 mb-6 drop-shadow-lg\">Vegeta (Super Saiyan)</p>\n        <div class=\"grid grid-cols-2 gap-4 w-full\">\n          <button class=\"px-4 py-2 text-lg font-bold text-white bg-red-600 rounded-lg shadow-md hover:bg-red-700 transition-colors duration-200 border-2 border-red-400\">Previous</button>\n          <button class=\"px-4 py-2 text-lg font-bold text-white bg-red-600 rounded-lg shadow-md hover:bg-red-700 transition-colors duration-200 border-2 border-red-400\">Next</button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex justify-center\">\n      <button class=\"px-12 py-4 text-2xl md:text-3xl font-bold text-white bg-green-600 rounded-lg shadow-md hover:bg-green-700 transition-colors duration-200 uppercase tracking-wide border-2 border-green-400 focus:outline-none focus:ring-4 focus:ring-green-500 focus:ring-opacity-50 transform hover:scale-105 active:scale-95 glow-on-hover\">\n        Start Battle\n      </button>\n    </div>\n  </div>\n</div>\n<style>\n  /* This style could be in a global CSS file or component-specific style block in React */\n  .text-shadow-md {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);\n  }\n  @keyframes glow {\n    0% { box-shadow: 0 0 5px #00BFFF, 0 0 10px #00BFFF, 0 0 15px #00BFFF; }\n    50% { box-shadow: 0 0 10px #00BFFF, 0 0 20px #00BFFF, 0 0 30px #00BFFF; }\n    100% { box-shadow: 0 0 5px #00BFFF, 0 0 10px #00BFFF, 0 0 15px #00BFFF; }\n  }\n  .glow-on-hover:hover {\n    animation: glow 1.5s ease-in-out infinite alternate;\n  }\n</style>\n",
    "in_game_hud": "<div class=\"absolute top-0 left-0 right-0 p-4 md:p-6 flex flex-col md:flex-row justify-between items-center z-50 pointer-events-none\">\n  <!-- Player HUD -->\n  <div class=\"flex items-center space-x-4 mb-4 md:mb-0 w-full md:w-auto\">\n    <img src=\"/assets/ui/goku_portrait.png\" alt=\"Player Portrait\" class=\"w-20 h-20 md:w-24 md:h-24 rounded-full border-4 border-blue-500 shadow-lg glow-blue transform hover:scale-105 transition-transform\" />\n    <div class=\"flex-grow\">\n      <div class=\"text-lg md:text-xl font-bold text-white mb-1 drop-shadow-md\">Goku (SSJ)</div>\n      <div class=\"w-full bg-gray-700 border-2 border-blue-400 rounded-full h-6 md:h-8 overflow-hidden shadow-inner mb-2\">\n        <div id=\"player-health-bar\" class=\"h-full bg-gradient-to-r from-red-500 to-red-700 transition-all duration-300 ease-out\" style=\"width: 100%;\"></div>\n      </div>\n      <div class=\"w-full bg-gray-700 border-2 border-cyan-400 rounded-full h-4 md:h-5 overflow-hidden shadow-inner\">\n        <div id=\"player-energy-bar\" class=\"h-full bg-gradient-to-r from-cyan-400 to-blue-500 transition-all duration-300 ease-out\" style=\"width: 0%;\"></div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Round Timer & Combo Counter -->\n  <div class=\"flex flex-col items-center justify-center p-3 md:p-4 bg-gray-900 border-4 border-yellow-500 rounded-lg shadow-xl opacity-90 mx-auto transform hover:scale-105 transition-transform\">\n    <div class=\"text-4xl md:text-5xl font-extrabold text-yellow-400 drop-shadow-lg mb-2\" id=\"round-timer\">99</div>\n    <div class=\"text-lg md:text-xl font-bold text-white drop-shadow-md mb-1\" id=\"round-indicator\">Round 1</div>\n    <div class=\"text-2xl md:text-3xl font-extrabold text-orange-400 drop-shadow-lg\" id=\"combo-counter\" style=\"display: none;\">Combo: <span class=\"text-red-500\">3</span></div>\n  </div>\n\n  <!-- Opponent HUD -->\n  <div class=\"flex items-center space-x-4 mt-4 md:mt-0 w-full md:w-auto md:justify-end\">\n    <div class=\"flex-grow text-right\">\n      <div class=\"text-lg md:text-xl font-bold text-white mb-1 drop-shadow-md\">Vegeta (SSJ)</div>\n      <div class=\"w-full bg-gray-700 border-2 border-red-400 rounded-full h-6 md:h-8 overflow-hidden shadow-inner mb-2\">\n        <div id=\"opponent-health-bar\" class=\"h-full bg-gradient-to-l from-red-500 to-red-700 transition-all duration-300 ease-out\" style=\"width: 100%;\"></div>\n      </div>\n      <div class=\"w-full bg-gray-700 border-2 border-purple-400 rounded-full h-4 md:h-5 overflow-hidden shadow-inner\">\n        <div id=\"opponent-energy-bar\" class=\"h-full bg-gradient-to-l from-purple-400 to-fuchsia-500 transition-all duration-300 ease-out\" style=\"width: 0%;\"></div>\n      </div>\n    </div>\n    <img src=\"/assets/ui/vegeta_portrait.png\" alt=\"Opponent Portrait\" class=\"w-20 h-20 md:w-24 md:h-24 rounded-full border-4 border-red-500 shadow-lg glow-red transform hover:scale-105 transition-transform\" />\n  </div>\n</div>\n<style>\n  .glow-blue {\n    box-shadow: 0 0 10px 2px rgba(0, 191, 255, 0.7);\n  }\n  .glow-red {\n    box-shadow: 0 0 10px 2px rgba(255, 0, 0, 0.7);\n  }\n  .text-shadow-md {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);\n  }\n</style>\n",
    "prompt_input_box": "<div class=\"fixed bottom-4 left-1/2 -translate-x-1/2 w-11/12 md:w-1/2 lg:w-1/3 bg-gray-800 p-4 rounded-lg shadow-xl border-2 border-gray-600 z-50 transition-all duration-300 ease-in-out opacity-90\">\n  <label for=\"game-prompt-input\" class=\"block text-gray-300 text-sm md:text-base font-semibold mb-2\">Game Console Input:</label>\n  <input\n    type=\"text\"\n    id=\"game-prompt-input\"\n    placeholder=\"Type commands or messages...\"\n    class=\"w-full p-3 bg-gray-700 text-white border border-gray-500 rounded-md focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 text-sm md:text-base font-mono\"\n  />\n  <button class=\"mt-3 w-full p-2 bg-blue-600 text-white font-bold rounded-md hover:bg-blue-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75\">\n    Send Command\n  </button>\n</div>\n"
  },
  "dynamic_loading_plan": [
    {
      "type": "background",
      "name": "battle_arena_desert",
      "placeholder_url": "/assets/backgrounds/battle_arena_desert.png",
      "dimensions": "1920x1080",
      "load_order": "preload"
    },
    {
      "type": "character",
      "name": "Goku (Super Saiyan)",
      "asset_key": "goku_ssj",
      "placeholder_url": "/assets/characters/goku_ssj_spritesheet.png",
      "frame_dimensions": "512x512",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "character",
      "name": "Vegeta (Super Saiyan)",
      "asset_key": "vegeta_ssj",
      "placeholder_url": "/assets/characters/vegeta_ssj_spritesheet.png",
      "frame_dimensions": "512x512",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "Kamehameha_beam",
      "asset_key": "kamehameha_fx",
      "placeholder_url": "/assets/effects/kamehameha_fx.png",
      "frame_dimensions": "512x256",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "Spirit_Bomb_orb",
      "asset_key": "spirit_bomb_fx",
      "placeholder_url": "/assets/effects/spirit_bomb_fx.png",
      "frame_dimensions": "512x512",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "Galick_Gun_beam",
      "asset_key": "galick_gun_fx",
      "placeholder_url": "/assets/effects/galick_gun_fx.png",
      "frame_dimensions": "512x256",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "Final_Flash_beam",
      "asset_key": "final_flash_fx",
      "placeholder_url": "/assets/effects/final_flash_fx.png",
      "frame_dimensions": "1024x512",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "Hit_impact",
      "asset_key": "hit_fx",
      "placeholder_url": "/assets/effects/hit_fx.png",
      "frame_dimensions": "256x256",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "fx",
      "name": "Dust_puff",
      "asset_key": "dust_fx",
      "placeholder_url": "/assets/effects/dust_fx.png",
      "frame_dimensions": "128x64",
      "sheet_dimensions": "Width x Height (depending on frame count)",
      "load_order": "preload"
    },
    {
      "type": "audio",
      "name": "battle_music",
      "placeholder_url": "/assets/audio/battle_music.mp3",
      "dimensions": null,
      "load_order": "preload"
    },
    {
      "type": "audio",
      "name": "kamehameha_sfx",
      "placeholder_url": "/assets/audio/kamehameha.wav",
      "dimensions": null,
      "load_order": "preload"
    },
    {
      "type": "audio",
      "name": "punch_sfx",
      "placeholder_url": "/assets/audio/punch.wav",
      "dimensions": null,
      "load_order": "preload"
    },
    {
      "type": "audio",
      "name": "hit_sfx",
      "placeholder_url": "/assets/audio/hit.wav",
      "dimensions": null,
      "load_order": "preload"
    },
    {
      "type": "ui_image",
      "name": "goku_portrait",
      "placeholder_url": "/assets/ui/goku_portrait.png",
      "dimensions": "256x256",
      "load_order": "preload"
    },
    {
      "type": "ui_image",
      "name": "vegeta_portrait",
      "placeholder_url": "/assets/ui/vegeta_portrait.png",
      "dimensions": "256x256",
      "load_order": "preload"
    },
    {
      "type": "ui_image",
      "name": "start_screen_bg",
      "placeholder_url": "/assets/backgrounds/start_screen_bg.jpg",
      "dimensions": "1920x1080",
      "load_order": "preload"
    },
    {
      "type": "ui_image",
      "name": "character_select_bg",
      "placeholder_url": "/assets/backgrounds/character_select_bg.jpg",
      "dimensions": "1920x1080",
      "load_order": "preload"
    }
  ]
}